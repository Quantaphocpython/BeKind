generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Campaign {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  BigInt   @unique // id on-chain
  owner       String   @db.ObjectId
  goal        BigInt   
  score       Int      @default(0)
  balance     BigInt   
  isExist     Boolean 
  description String   
  createdAt   DateTime @default(now()) 
  voteCount   Int      @default(0) 

  proofs      Proof[]  @relation("CampaignProofs")
  ownerUser   User?    @relation("UserCampaigns", fields: [owner], references: [id])
  votes       Vote[]   @relation("CampaignVotes")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  address     String   @unique // address on-chain
  name        String? 
  email       String?  @unique
  trustScore  Float    @default(0.0) 
  createdAt   DateTime @default(now()) 

  campaigns   Campaign[] @relation("UserCampaigns")
  proofs      Proof[]    @relation("UserProofs")
  votes       Vote[]     @relation("UserVotes")
}

model Proof {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  BigInt  
  userId      String   @db.ObjectId
  content     String   // content
  createdAt   DateTime @default(now()) 

  campaign    Campaign @relation("CampaignProofs", fields: [campaignId], references: [campaignId])
  user        User     @relation("UserProofs", fields: [userId], references: [id])
}

model Vote {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  BigInt  
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now()) 

  campaign    Campaign @relation("CampaignVotes", fields: [campaignId], references: [campaignId])
  user        User     @relation("UserVotes", fields: [userId], references: [id])

  @@unique([campaignId, userId])
}